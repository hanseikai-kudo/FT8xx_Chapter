
ft8xx_chapter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000008f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000089e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000008f2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000924  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000c8  00000000  00000000  00000964  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000193c  00000000  00000000  00000a2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009a8  00000000  00000000  00002368  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000008d7  00000000  00000000  00002d10  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000240  00000000  00000000  000035e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000532  00000000  00000000  00003828  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000b9f  00000000  00000000  00003d5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000098  00000000  00000000  000048f9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 20 01 	call	0x240	; 0x240 <main>
  78:	0c 94 4d 04 	jmp	0x89a	; 0x89a <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <TransByte>:
	FT8XX_nCS_Hi();

	value = (((unsigned long)(ary[0]))<<24)|(((unsigned long)(ary[1]))<<16)|(((unsigned long)(ary[2]))<<8)|((unsigned long)(ary[3]));

	return value;
}
  80:	8e bd       	out	0x2e, r24	; 46
  82:	0d b4       	in	r0, 0x2d	; 45
  84:	07 fe       	sbrs	r0, 7
  86:	fd cf       	rjmp	.-6      	; 0x82 <TransByte+0x2>
  88:	8e b5       	in	r24, 0x2e	; 46
  8a:	08 95       	ret

0000008c <HostCommand>:
  8c:	cf 93       	push	r28
  8e:	df 93       	push	r29
  90:	d6 2f       	mov	r29, r22
  92:	c4 2f       	mov	r28, r20
  94:	2a 98       	cbi	0x05, 2	; 5
  96:	0e 94 40 00 	call	0x80	; 0x80 <TransByte>
  9a:	8d 2f       	mov	r24, r29
  9c:	0e 94 40 00 	call	0x80	; 0x80 <TransByte>
  a0:	8c 2f       	mov	r24, r28
  a2:	0e 94 40 00 	call	0x80	; 0x80 <TransByte>
  a6:	2a 9a       	sbi	0x05, 2	; 5
  a8:	df 91       	pop	r29
  aa:	cf 91       	pop	r28
  ac:	08 95       	ret

000000ae <HostMemWriteByte>:
  ae:	cf 92       	push	r12
  b0:	df 92       	push	r13
  b2:	ef 92       	push	r14
  b4:	ff 92       	push	r15
  b6:	cf 93       	push	r28
  b8:	6b 01       	movw	r12, r22
  ba:	7c 01       	movw	r14, r24
  bc:	c4 2f       	mov	r28, r20
  be:	2a 98       	cbi	0x05, 2	; 5
  c0:	dc 01       	movw	r26, r24
  c2:	cb 01       	movw	r24, r22
  c4:	88 27       	eor	r24, r24
  c6:	99 27       	eor	r25, r25
  c8:	bb 27       	eor	r27, r27
  ca:	bc 01       	movw	r22, r24
  cc:	cd 01       	movw	r24, r26
  ce:	80 68       	ori	r24, 0x80	; 128
  d0:	0e 94 40 00 	call	0x80	; 0x80 <TransByte>
  d4:	8d 2d       	mov	r24, r13
  d6:	0e 94 40 00 	call	0x80	; 0x80 <TransByte>
  da:	8c 2d       	mov	r24, r12
  dc:	0e 94 40 00 	call	0x80	; 0x80 <TransByte>
  e0:	8c 2f       	mov	r24, r28
  e2:	0e 94 40 00 	call	0x80	; 0x80 <TransByte>
  e6:	2a 9a       	sbi	0x05, 2	; 5
  e8:	cf 91       	pop	r28
  ea:	ff 90       	pop	r15
  ec:	ef 90       	pop	r14
  ee:	df 90       	pop	r13
  f0:	cf 90       	pop	r12
  f2:	08 95       	ret

000000f4 <HostMemWriteWord>:
  f4:	cf 92       	push	r12
  f6:	df 92       	push	r13
  f8:	ef 92       	push	r14
  fa:	ff 92       	push	r15
  fc:	cf 93       	push	r28
  fe:	df 93       	push	r29
 100:	6b 01       	movw	r12, r22
 102:	7c 01       	movw	r14, r24
 104:	d4 2f       	mov	r29, r20
 106:	c5 2f       	mov	r28, r21
 108:	2a 98       	cbi	0x05, 2	; 5
 10a:	dc 01       	movw	r26, r24
 10c:	cb 01       	movw	r24, r22
 10e:	88 27       	eor	r24, r24
 110:	99 27       	eor	r25, r25
 112:	bb 27       	eor	r27, r27
 114:	bc 01       	movw	r22, r24
 116:	cd 01       	movw	r24, r26
 118:	80 68       	ori	r24, 0x80	; 128
 11a:	0e 94 40 00 	call	0x80	; 0x80 <TransByte>
 11e:	8d 2d       	mov	r24, r13
 120:	0e 94 40 00 	call	0x80	; 0x80 <TransByte>
 124:	8c 2d       	mov	r24, r12
 126:	0e 94 40 00 	call	0x80	; 0x80 <TransByte>
 12a:	8d 2f       	mov	r24, r29
 12c:	0e 94 40 00 	call	0x80	; 0x80 <TransByte>
 130:	8c 2f       	mov	r24, r28
 132:	0e 94 40 00 	call	0x80	; 0x80 <TransByte>
 136:	2a 9a       	sbi	0x05, 2	; 5
 138:	df 91       	pop	r29
 13a:	cf 91       	pop	r28
 13c:	ff 90       	pop	r15
 13e:	ef 90       	pop	r14
 140:	df 90       	pop	r13
 142:	cf 90       	pop	r12
 144:	08 95       	ret

00000146 <HostMemWriteDoubleWord>:
 146:	cf 92       	push	r12
 148:	df 92       	push	r13
 14a:	ef 92       	push	r14
 14c:	ff 92       	push	r15
 14e:	0f 93       	push	r16
 150:	1f 93       	push	r17
 152:	cf 93       	push	r28
 154:	df 93       	push	r29
 156:	6b 01       	movw	r12, r22
 158:	7c 01       	movw	r14, r24
 15a:	02 2f       	mov	r16, r18
 15c:	13 2f       	mov	r17, r19
 15e:	d4 2f       	mov	r29, r20
 160:	c5 2f       	mov	r28, r21
 162:	2a 98       	cbi	0x05, 2	; 5
 164:	dc 01       	movw	r26, r24
 166:	cb 01       	movw	r24, r22
 168:	88 27       	eor	r24, r24
 16a:	99 27       	eor	r25, r25
 16c:	bb 27       	eor	r27, r27
 16e:	bc 01       	movw	r22, r24
 170:	cd 01       	movw	r24, r26
 172:	80 68       	ori	r24, 0x80	; 128
 174:	0e 94 40 00 	call	0x80	; 0x80 <TransByte>
 178:	8d 2d       	mov	r24, r13
 17a:	0e 94 40 00 	call	0x80	; 0x80 <TransByte>
 17e:	8c 2d       	mov	r24, r12
 180:	0e 94 40 00 	call	0x80	; 0x80 <TransByte>
 184:	80 2f       	mov	r24, r16
 186:	0e 94 40 00 	call	0x80	; 0x80 <TransByte>
 18a:	81 2f       	mov	r24, r17
 18c:	0e 94 40 00 	call	0x80	; 0x80 <TransByte>
 190:	8d 2f       	mov	r24, r29
 192:	0e 94 40 00 	call	0x80	; 0x80 <TransByte>
 196:	8c 2f       	mov	r24, r28
 198:	0e 94 40 00 	call	0x80	; 0x80 <TransByte>
 19c:	2a 9a       	sbi	0x05, 2	; 5
 19e:	df 91       	pop	r29
 1a0:	cf 91       	pop	r28
 1a2:	1f 91       	pop	r17
 1a4:	0f 91       	pop	r16
 1a6:	ff 90       	pop	r15
 1a8:	ef 90       	pop	r14
 1aa:	df 90       	pop	r13
 1ac:	cf 90       	pop	r12
 1ae:	08 95       	ret

000001b0 <HostMemReadWord>:
 1b0:	cf 93       	push	r28
 1b2:	df 93       	push	r29
 1b4:	c6 2f       	mov	r28, r22
 1b6:	d7 2f       	mov	r29, r23
 1b8:	2a 98       	cbi	0x05, 2	; 5
 1ba:	0e 94 40 00 	call	0x80	; 0x80 <TransByte>
 1be:	8d 2f       	mov	r24, r29
 1c0:	0e 94 40 00 	call	0x80	; 0x80 <TransByte>
 1c4:	8c 2f       	mov	r24, r28
 1c6:	0e 94 40 00 	call	0x80	; 0x80 <TransByte>
 1ca:	80 e0       	ldi	r24, 0x00	; 0
 1cc:	0e 94 40 00 	call	0x80	; 0x80 <TransByte>
 1d0:	80 e0       	ldi	r24, 0x00	; 0
 1d2:	0e 94 40 00 	call	0x80	; 0x80 <TransByte>
 1d6:	c8 2f       	mov	r28, r24
 1d8:	80 e0       	ldi	r24, 0x00	; 0
 1da:	0e 94 40 00 	call	0x80	; 0x80 <TransByte>
 1de:	2a 9a       	sbi	0x05, 2	; 5
 1e0:	28 2f       	mov	r18, r24
 1e2:	30 e0       	ldi	r19, 0x00	; 0
 1e4:	92 2f       	mov	r25, r18
 1e6:	88 27       	eor	r24, r24
 1e8:	8c 0f       	add	r24, r28
 1ea:	91 1d       	adc	r25, r1
 1ec:	df 91       	pop	r29
 1ee:	cf 91       	pop	r28
 1f0:	08 95       	ret

000001f2 <incCMDOffset>:


unsigned int incCMDOffset(unsigned int currentOffset, unsigned char commandSize)
{
	unsigned int newOffset;
	newOffset = currentOffset + commandSize;
 1f2:	86 0f       	add	r24, r22
 1f4:	91 1d       	adc	r25, r1
	if(newOffset > 4095)
 1f6:	81 15       	cp	r24, r1
 1f8:	20 e1       	ldi	r18, 0x10	; 16
 1fa:	92 07       	cpc	r25, r18
 1fc:	08 f0       	brcs	.+2      	; 0x200 <incCMDOffset+0xe>
	{
		newOffset = (newOffset - 4096);
 1fe:	90 51       	subi	r25, 0x10	; 16
	}
	return newOffset;
}
 200:	08 95       	ret

00000202 <UserWait>:

void UserWait( unsigned long time )
{
//	return;

	while( time-- )
 202:	61 15       	cp	r22, r1
 204:	71 05       	cpc	r23, r1
 206:	81 05       	cpc	r24, r1
 208:	91 05       	cpc	r25, r1
 20a:	51 f0       	breq	.+20     	; 0x220 <UserWait+0x1e>
 20c:	dc 01       	movw	r26, r24
 20e:	cb 01       	movw	r24, r22
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 210:	22 e0       	ldi	r18, 0x02	; 2
 212:	2a 95       	dec	r18
 214:	f1 f7       	brne	.-4      	; 0x212 <UserWait+0x10>
 216:	00 c0       	rjmp	.+0      	; 0x218 <UserWait+0x16>
 218:	01 97       	sbiw	r24, 0x01	; 1
 21a:	a1 09       	sbc	r26, r1
 21c:	b1 09       	sbc	r27, r1
 21e:	c1 f7       	brne	.-16     	; 0x210 <UserWait+0xe>
 220:	08 95       	ret

00000222 <PortInit>:

void PortInit( void )
{

//	outport(PORTB,0xFF);
	outport(DDRB,0xAD);//10101101
 222:	8d ea       	ldi	r24, 0xAD	; 173
 224:	84 b9       	out	0x04, r24	; 4
	outport(PORTB,0xFE);
 226:	9e ef       	ldi	r25, 0xFE	; 254
 228:	95 b9       	out	0x05, r25	; 5

	outport( PORTD,0xFF );
 22a:	8f ef       	ldi	r24, 0xFF	; 255
 22c:	8b b9       	out	0x0b, r24	; 11
	outport( DDRD,0xFE );
 22e:	9a b9       	out	0x0a, r25	; 10
	outport( PORTD,0x0F );
 230:	9f e0       	ldi	r25, 0x0F	; 15
 232:	9b b9       	out	0x0b, r25	; 11

	outport( PORTC,0xFF );
 234:	88 b9       	out	0x08, r24	; 8
	outport( DDRC,0x00 );
 236:	17 b8       	out	0x07, r1	; 7
	outport( PORTC,0xFF );
 238:	88 b9       	out	0x08, r24	; 8

	SPI_Init();
 23a:	0e 94 ef 03 	call	0x7de	; 0x7de <SPI_Init>
 23e:	08 95       	ret

00000240 <main>:




int main(void)
{
 240:	cf 93       	push	r28
 242:	df 93       	push	r29
 244:	cd b7       	in	r28, 0x3d	; 61
 246:	de b7       	in	r29, 0x3e	; 62
 248:	2c 97       	sbiw	r28, 0x0c	; 12
 24a:	0f b6       	in	r0, 0x3f	; 63
 24c:	f8 94       	cli
 24e:	de bf       	out	0x3e, r29	; 62
 250:	0f be       	out	0x3f, r0	; 63
 252:	cd bf       	out	0x3d, r28	; 61
	unsigned int cmdBufferWr = 0x0000;											// Used to navigate command ring buffer


if(CHAPTER_0)
{
	PortInit();
 254:	0e 94 11 01 	call	0x222	; 0x222 <PortInit>

	UserWait(100000);
 258:	60 ea       	ldi	r22, 0xA0	; 160
 25a:	76 e8       	ldi	r23, 0x86	; 134
 25c:	81 e0       	ldi	r24, 0x01	; 1
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	0e 94 01 01 	call	0x202	; 0x202 <UserWait>
	UserWait(100000);
 264:	60 ea       	ldi	r22, 0xA0	; 160
 266:	76 e8       	ldi	r23, 0x86	; 134
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	0e 94 01 01 	call	0x202	; 0x202 <UserWait>
	UserWait(100000);
 270:	60 ea       	ldi	r22, 0xA0	; 160
 272:	76 e8       	ldi	r23, 0x86	; 134
 274:	81 e0       	ldi	r24, 0x01	; 1
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	0e 94 01 01 	call	0x202	; 0x202 <UserWait>
	UserWait(100000);
 27c:	60 ea       	ldi	r22, 0xA0	; 160
 27e:	76 e8       	ldi	r23, 0x86	; 134
 280:	81 e0       	ldi	r24, 0x01	; 1
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	0e 94 01 01 	call	0x202	; 0x202 <UserWait>

	HostCommand(HOST_CLKINT,0,0);//send command to "CLKEXT" to FT81X 
 288:	40 e0       	ldi	r20, 0x00	; 0
 28a:	60 e0       	ldi	r22, 0x00	; 0
 28c:	88 e4       	ldi	r24, 0x48	; 72
 28e:	0e 94 46 00 	call	0x8c	; 0x8c <HostCommand>
	HostCommand(HOST_ACTIVE,0,0);//send host command "ACTIVE" to FT81X 
 292:	40 e0       	ldi	r20, 0x00	; 0
 294:	60 e0       	ldi	r22, 0x00	; 0
 296:	80 e0       	ldi	r24, 0x00	; 0
 298:	0e 94 46 00 	call	0x8c	; 0x8c <HostCommand>
	UserWait(100000);
 29c:	60 ea       	ldi	r22, 0xA0	; 160
 29e:	76 e8       	ldi	r23, 0x86	; 134
 2a0:	81 e0       	ldi	r24, 0x01	; 1
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	0e 94 01 01 	call	0x202	; 0x202 <UserWait>
	UserWait(100000);
 2a8:	60 ea       	ldi	r22, 0xA0	; 160
 2aa:	76 e8       	ldi	r23, 0x86	; 134
 2ac:	81 e0       	ldi	r24, 0x01	; 1
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	0e 94 01 01 	call	0x202	; 0x202 <UserWait>


	HostMemWriteByte(REG_CPURESET, 0x01); 
 2b4:	41 e0       	ldi	r20, 0x01	; 1
 2b6:	60 e2       	ldi	r22, 0x20	; 32
 2b8:	70 e2       	ldi	r23, 0x20	; 32
 2ba:	80 e3       	ldi	r24, 0x30	; 48
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	0e 94 57 00 	call	0xae	; 0xae <HostMemWriteByte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2c2:	8f e1       	ldi	r24, 0x1F	; 31
 2c4:	9e e4       	ldi	r25, 0x4E	; 78
 2c6:	01 97       	sbiw	r24, 0x01	; 1
 2c8:	f1 f7       	brne	.-4      	; 0x2c6 <main+0x86>
 2ca:	00 c0       	rjmp	.+0      	; 0x2cc <main+0x8c>
 2cc:	00 00       	nop
//	PORTB0_Hi();
	_delay_ms(10);
//	PORTB0_Low();
	HostMemWriteByte(REG_CPURESET, 0x00); 
 2ce:	40 e0       	ldi	r20, 0x00	; 0
 2d0:	60 e2       	ldi	r22, 0x20	; 32
 2d2:	70 e2       	ldi	r23, 0x20	; 32
 2d4:	80 e3       	ldi	r24, 0x30	; 48
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	0e 94 57 00 	call	0xae	; 0xae <HostMemWriteByte>

// Now start clocking data to the LCD panel
	HostMemWriteByte(REG_PCLK, 7);
 2dc:	47 e0       	ldi	r20, 0x07	; 7
 2de:	60 e7       	ldi	r22, 0x70	; 112
 2e0:	70 e2       	ldi	r23, 0x20	; 32
 2e2:	80 e3       	ldi	r24, 0x30	; 48
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	0e 94 57 00 	call	0xae	; 0xae <HostMemWriteByte>
	HostMemWriteByte(REG_DITHER, 0x00);
 2ea:	40 e0       	ldi	r20, 0x00	; 0
 2ec:	60 e6       	ldi	r22, 0x60	; 96
 2ee:	70 e2       	ldi	r23, 0x20	; 32
 2f0:	80 e3       	ldi	r24, 0x30	; 48
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	0e 94 57 00 	call	0xae	; 0xae <HostMemWriteByte>
/* Configure display registers - demonstration for WQVGA resolution */ 
	HostMemWriteWord(REG_HSIZE, 480); 
 2f8:	40 ee       	ldi	r20, 0xE0	; 224
 2fa:	51 e0       	ldi	r21, 0x01	; 1
 2fc:	64 e3       	ldi	r22, 0x34	; 52
 2fe:	70 e2       	ldi	r23, 0x20	; 32
 300:	80 e3       	ldi	r24, 0x30	; 48
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	0e 94 7a 00 	call	0xf4	; 0xf4 <HostMemWriteWord>
	HostMemWriteWord(REG_HCYCLE, 531); 
 308:	43 e1       	ldi	r20, 0x13	; 19
 30a:	52 e0       	ldi	r21, 0x02	; 2
 30c:	6c e2       	ldi	r22, 0x2C	; 44
 30e:	70 e2       	ldi	r23, 0x20	; 32
 310:	80 e3       	ldi	r24, 0x30	; 48
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	0e 94 7a 00 	call	0xf4	; 0xf4 <HostMemWriteWord>
	HostMemWriteWord(REG_HOFFSET, 51); 
 318:	43 e3       	ldi	r20, 0x33	; 51
 31a:	50 e0       	ldi	r21, 0x00	; 0
 31c:	60 e3       	ldi	r22, 0x30	; 48
 31e:	70 e2       	ldi	r23, 0x20	; 32
 320:	80 e3       	ldi	r24, 0x30	; 48
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	0e 94 7a 00 	call	0xf4	; 0xf4 <HostMemWriteWord>
	HostMemWriteWord(REG_HSYNC0, 8); 
 328:	48 e0       	ldi	r20, 0x08	; 8
 32a:	50 e0       	ldi	r21, 0x00	; 0
 32c:	68 e3       	ldi	r22, 0x38	; 56
 32e:	70 e2       	ldi	r23, 0x20	; 32
 330:	80 e3       	ldi	r24, 0x30	; 48
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	0e 94 7a 00 	call	0xf4	; 0xf4 <HostMemWriteWord>
	HostMemWriteWord(REG_HSYNC1, 43); 
 338:	4b e2       	ldi	r20, 0x2B	; 43
 33a:	50 e0       	ldi	r21, 0x00	; 0
 33c:	6c e3       	ldi	r22, 0x3C	; 60
 33e:	70 e2       	ldi	r23, 0x20	; 32
 340:	80 e3       	ldi	r24, 0x30	; 48
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	0e 94 7a 00 	call	0xf4	; 0xf4 <HostMemWriteWord>
	HostMemWriteWord(REG_VSIZE, 272); 
 348:	40 e1       	ldi	r20, 0x10	; 16
 34a:	51 e0       	ldi	r21, 0x01	; 1
 34c:	68 e4       	ldi	r22, 0x48	; 72
 34e:	70 e2       	ldi	r23, 0x20	; 32
 350:	80 e3       	ldi	r24, 0x30	; 48
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	0e 94 7a 00 	call	0xf4	; 0xf4 <HostMemWriteWord>
	HostMemWriteWord(REG_VCYCLE, 288); 
 358:	40 e2       	ldi	r20, 0x20	; 32
 35a:	51 e0       	ldi	r21, 0x01	; 1
 35c:	60 e4       	ldi	r22, 0x40	; 64
 35e:	70 e2       	ldi	r23, 0x20	; 32
 360:	80 e3       	ldi	r24, 0x30	; 48
 362:	90 e0       	ldi	r25, 0x00	; 0
 364:	0e 94 7a 00 	call	0xf4	; 0xf4 <HostMemWriteWord>
	HostMemWriteWord(REG_VOFFSET, 12); 
 368:	4c e0       	ldi	r20, 0x0C	; 12
 36a:	50 e0       	ldi	r21, 0x00	; 0
 36c:	64 e4       	ldi	r22, 0x44	; 68
 36e:	70 e2       	ldi	r23, 0x20	; 32
 370:	80 e3       	ldi	r24, 0x30	; 48
 372:	90 e0       	ldi	r25, 0x00	; 0
 374:	0e 94 7a 00 	call	0xf4	; 0xf4 <HostMemWriteWord>
	HostMemWriteWord(REG_VSYNC0, 4); 
 378:	44 e0       	ldi	r20, 0x04	; 4
 37a:	50 e0       	ldi	r21, 0x00	; 0
 37c:	6c e4       	ldi	r22, 0x4C	; 76
 37e:	70 e2       	ldi	r23, 0x20	; 32
 380:	80 e3       	ldi	r24, 0x30	; 48
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	0e 94 7a 00 	call	0xf4	; 0xf4 <HostMemWriteWord>
	HostMemWriteWord(REG_VSYNC1, 14); 
 388:	4e e0       	ldi	r20, 0x0E	; 14
 38a:	50 e0       	ldi	r21, 0x00	; 0
 38c:	60 e5       	ldi	r22, 0x50	; 80
 38e:	70 e2       	ldi	r23, 0x20	; 32
 390:	80 e3       	ldi	r24, 0x30	; 48
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	0e 94 7a 00 	call	0xf4	; 0xf4 <HostMemWriteWord>
	HostMemWriteByte(REG_SWIZZLE, 0); 
 398:	40 e0       	ldi	r20, 0x00	; 0
 39a:	64 e6       	ldi	r22, 0x64	; 100
 39c:	70 e2       	ldi	r23, 0x20	; 32
 39e:	80 e3       	ldi	r24, 0x30	; 48
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	0e 94 57 00 	call	0xae	; 0xae <HostMemWriteByte>
	HostMemWriteByte(REG_PCLK_POL, 1); 
 3a6:	41 e0       	ldi	r20, 0x01	; 1
 3a8:	6c e6       	ldi	r22, 0x6C	; 108
 3aa:	70 e2       	ldi	r23, 0x20	; 32
 3ac:	80 e3       	ldi	r24, 0x30	; 48
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	0e 94 57 00 	call	0xae	; 0xae <HostMemWriteByte>

//	HostMemWriteByte(REG_GPIO_DIR, 0x80); 
//	HostMemWriteByte(REG_GPIO, 0x80); 
//	HostMemWriteByte(REG_PWM_DUTY, 128); 

	HostMemWriteDoubleWord( REG_GPIO_DIR, 0x00000080 );
 3b4:	20 e8       	ldi	r18, 0x80	; 128
 3b6:	30 e0       	ldi	r19, 0x00	; 0
 3b8:	40 e0       	ldi	r20, 0x00	; 0
 3ba:	50 e0       	ldi	r21, 0x00	; 0
 3bc:	60 e9       	ldi	r22, 0x90	; 144
 3be:	70 e2       	ldi	r23, 0x20	; 32
 3c0:	80 e3       	ldi	r24, 0x30	; 48
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	0e 94 a3 00 	call	0x146	; 0x146 <HostMemWriteDoubleWord>
	HostMemWriteDoubleWord( REG_GPIO, 0x00000080 );
 3c8:	20 e8       	ldi	r18, 0x80	; 128
 3ca:	30 e0       	ldi	r19, 0x00	; 0
 3cc:	40 e0       	ldi	r20, 0x00	; 0
 3ce:	50 e0       	ldi	r21, 0x00	; 0
 3d0:	64 e9       	ldi	r22, 0x94	; 148
 3d2:	70 e2       	ldi	r23, 0x20	; 32
 3d4:	80 e3       	ldi	r24, 0x30	; 48
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	0e 94 a3 00 	call	0x146	; 0x146 <HostMemWriteDoubleWord>

	HostMemWriteDoubleWord( REG_PWM_DUTY, 0x00000080 );
 3dc:	20 e8       	ldi	r18, 0x80	; 128
 3de:	30 e0       	ldi	r19, 0x00	; 0
 3e0:	40 e0       	ldi	r20, 0x00	; 0
 3e2:	50 e0       	ldi	r21, 0x00	; 0
 3e4:	64 ed       	ldi	r22, 0xD4	; 212
 3e6:	70 e2       	ldi	r23, 0x20	; 32
 3e8:	80 e3       	ldi	r24, 0x30	; 48
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	0e 94 a3 00 	call	0x146	; 0x146 <HostMemWriteDoubleWord>
	long rr=0,gg=0,bb=0;

	while(1)
	{
		point_x += delta_x;
		point_y += delta_y;
 3f0:	41 2c       	mov	r4, r1
 3f2:	51 2c       	mov	r5, r1
 3f4:	32 01       	movw	r6, r4
 3f6:	43 94       	inc	r4

	long rr=0,gg=0,bb=0;

	while(1)
	{
		point_x += delta_x;
 3f8:	81 2c       	mov	r8, r1
 3fa:	91 2c       	mov	r9, r1
 3fc:	54 01       	movw	r10, r8
 3fe:	68 94       	set
 400:	81 f8       	bld	r8, 1
{
	unsigned long color;
	signed long point_x = 0;
	signed long point_y = 0;
	signed long delta_x = 2;
	signed long delta_y = 1;
 402:	81 e0       	ldi	r24, 0x01	; 1
 404:	90 e0       	ldi	r25, 0x00	; 0
 406:	a0 e0       	ldi	r26, 0x00	; 0
 408:	b0 e0       	ldi	r27, 0x00	; 0
 40a:	8d 83       	std	Y+5, r24	; 0x05
 40c:	9e 83       	std	Y+6, r25	; 0x06
 40e:	af 83       	std	Y+7, r26	; 0x07
 410:	b8 87       	std	Y+8, r27	; 0x08
if(CHAPTER_2C)
{
	unsigned long color;
	signed long point_x = 0;
	signed long point_y = 0;
	signed long delta_x = 2;
 412:	82 e0       	ldi	r24, 0x02	; 2
 414:	90 e0       	ldi	r25, 0x00	; 0
 416:	a0 e0       	ldi	r26, 0x00	; 0
 418:	b0 e0       	ldi	r27, 0x00	; 0
 41a:	89 83       	std	Y+1, r24	; 0x01
 41c:	9a 83       	std	Y+2, r25	; 0x02
 41e:	ab 83       	std	Y+3, r26	; 0x03
 420:	bc 83       	std	Y+4, r27	; 0x04
 422:	3a c0       	rjmp	.+116    	; 0x498 <__LOCK_REGION_LENGTH__+0x98>

	long rr=0,gg=0,bb=0;

	while(1)
	{
		point_x += delta_x;
 424:	89 81       	ldd	r24, Y+1	; 0x01
 426:	9a 81       	ldd	r25, Y+2	; 0x02
 428:	ab 81       	ldd	r26, Y+3	; 0x03
 42a:	bc 81       	ldd	r27, Y+4	; 0x04
 42c:	88 0e       	add	r8, r24
 42e:	99 1e       	adc	r9, r25
 430:	aa 1e       	adc	r10, r26
 432:	bb 1e       	adc	r11, r27
		point_y += delta_y;
 434:	8d 81       	ldd	r24, Y+5	; 0x05
 436:	9e 81       	ldd	r25, Y+6	; 0x06
 438:	af 81       	ldd	r26, Y+7	; 0x07
 43a:	b8 85       	ldd	r27, Y+8	; 0x08
 43c:	48 0e       	add	r4, r24
 43e:	59 1e       	adc	r5, r25
 440:	6a 1e       	adc	r6, r26
 442:	7b 1e       	adc	r7, r27

		if( point_x >= 479 )delta_x *= -1;
 444:	9f ed       	ldi	r25, 0xDF	; 223
 446:	89 16       	cp	r8, r25
 448:	91 e0       	ldi	r25, 0x01	; 1
 44a:	99 06       	cpc	r9, r25
 44c:	a1 04       	cpc	r10, r1
 44e:	b1 04       	cpc	r11, r1
 450:	7c f0       	brlt	.+30     	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
 452:	89 81       	ldd	r24, Y+1	; 0x01
 454:	9a 81       	ldd	r25, Y+2	; 0x02
 456:	ab 81       	ldd	r26, Y+3	; 0x03
 458:	bc 81       	ldd	r27, Y+4	; 0x04
 45a:	b0 95       	com	r27
 45c:	a0 95       	com	r26
 45e:	90 95       	com	r25
 460:	81 95       	neg	r24
 462:	9f 4f       	sbci	r25, 0xFF	; 255
 464:	af 4f       	sbci	r26, 0xFF	; 255
 466:	bf 4f       	sbci	r27, 0xFF	; 255
 468:	89 83       	std	Y+1, r24	; 0x01
 46a:	9a 83       	std	Y+2, r25	; 0x02
 46c:	ab 83       	std	Y+3, r26	; 0x03
 46e:	bc 83       	std	Y+4, r27	; 0x04
		if( point_x <= 0 )delta_x *= -1;
 470:	18 14       	cp	r1, r8
 472:	19 04       	cpc	r1, r9
 474:	1a 04       	cpc	r1, r10
 476:	1b 04       	cpc	r1, r11
 478:	7c f0       	brlt	.+30     	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
 47a:	89 81       	ldd	r24, Y+1	; 0x01
 47c:	9a 81       	ldd	r25, Y+2	; 0x02
 47e:	ab 81       	ldd	r26, Y+3	; 0x03
 480:	bc 81       	ldd	r27, Y+4	; 0x04
 482:	b0 95       	com	r27
 484:	a0 95       	com	r26
 486:	90 95       	com	r25
 488:	81 95       	neg	r24
 48a:	9f 4f       	sbci	r25, 0xFF	; 255
 48c:	af 4f       	sbci	r26, 0xFF	; 255
 48e:	bf 4f       	sbci	r27, 0xFF	; 255
 490:	89 83       	std	Y+1, r24	; 0x01
 492:	9a 83       	std	Y+2, r25	; 0x02
 494:	ab 83       	std	Y+3, r26	; 0x03
 496:	bc 83       	std	Y+4, r27	; 0x04
		if( point_y >= 271 )delta_y *= -1;
 498:	9f e0       	ldi	r25, 0x0F	; 15
 49a:	49 16       	cp	r4, r25
 49c:	91 e0       	ldi	r25, 0x01	; 1
 49e:	59 06       	cpc	r5, r25
 4a0:	61 04       	cpc	r6, r1
 4a2:	71 04       	cpc	r7, r1
 4a4:	7c f0       	brlt	.+30     	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
 4a6:	8d 81       	ldd	r24, Y+5	; 0x05
 4a8:	9e 81       	ldd	r25, Y+6	; 0x06
 4aa:	af 81       	ldd	r26, Y+7	; 0x07
 4ac:	b8 85       	ldd	r27, Y+8	; 0x08
 4ae:	b0 95       	com	r27
 4b0:	a0 95       	com	r26
 4b2:	90 95       	com	r25
 4b4:	81 95       	neg	r24
 4b6:	9f 4f       	sbci	r25, 0xFF	; 255
 4b8:	af 4f       	sbci	r26, 0xFF	; 255
 4ba:	bf 4f       	sbci	r27, 0xFF	; 255
 4bc:	8d 83       	std	Y+5, r24	; 0x05
 4be:	9e 83       	std	Y+6, r25	; 0x06
 4c0:	af 83       	std	Y+7, r26	; 0x07
 4c2:	b8 87       	std	Y+8, r27	; 0x08
		if( point_y <= 0 )delta_y *= -1;
 4c4:	14 14       	cp	r1, r4
 4c6:	15 04       	cpc	r1, r5
 4c8:	16 04       	cpc	r1, r6
 4ca:	17 04       	cpc	r1, r7
 4cc:	7c f0       	brlt	.+30     	; 0x4ec <__LOCK_REGION_LENGTH__+0xec>
 4ce:	8d 81       	ldd	r24, Y+5	; 0x05
 4d0:	9e 81       	ldd	r25, Y+6	; 0x06
 4d2:	af 81       	ldd	r26, Y+7	; 0x07
 4d4:	b8 85       	ldd	r27, Y+8	; 0x08
 4d6:	b0 95       	com	r27
 4d8:	a0 95       	com	r26
 4da:	90 95       	com	r25
 4dc:	81 95       	neg	r24
 4de:	9f 4f       	sbci	r25, 0xFF	; 255
 4e0:	af 4f       	sbci	r26, 0xFF	; 255
 4e2:	bf 4f       	sbci	r27, 0xFF	; 255
 4e4:	8d 83       	std	Y+5, r24	; 0x05
 4e6:	9e 83       	std	Y+6, r25	; 0x06
 4e8:	af 83       	std	Y+7, r26	; 0x07
 4ea:	b8 87       	std	Y+8, r27	; 0x08

		bb = (long)(( (53) *(point_x) )/100);
 4ec:	a5 e3       	ldi	r26, 0x35	; 53
 4ee:	b0 e0       	ldi	r27, 0x00	; 0
 4f0:	a5 01       	movw	r20, r10
 4f2:	94 01       	movw	r18, r8
 4f4:	0e 94 11 04 	call	0x822	; 0x822 <__muluhisi3>
 4f8:	24 e6       	ldi	r18, 0x64	; 100
 4fa:	30 e0       	ldi	r19, 0x00	; 0
 4fc:	40 e0       	ldi	r20, 0x00	; 0
 4fe:	50 e0       	ldi	r21, 0x00	; 0
 500:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <__divmodsi4>
 504:	29 87       	std	Y+9, r18	; 0x09
 506:	3a 87       	std	Y+10, r19	; 0x0a
 508:	4b 87       	std	Y+11, r20	; 0x0b
 50a:	5c 87       	std	Y+12, r21	; 0x0c
		gg = (long)(( (94) *(point_y) )/100);
 50c:	ae e5       	ldi	r26, 0x5E	; 94
 50e:	b0 e0       	ldi	r27, 0x00	; 0
 510:	a3 01       	movw	r20, r6
 512:	92 01       	movw	r18, r4
 514:	0e 94 11 04 	call	0x822	; 0x822 <__muluhisi3>
 518:	24 e6       	ldi	r18, 0x64	; 100
 51a:	30 e0       	ldi	r19, 0x00	; 0
 51c:	40 e0       	ldi	r20, 0x00	; 0
 51e:	50 e0       	ldi	r21, 0x00	; 0
 520:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <__divmodsi4>
 524:	69 01       	movw	r12, r18
 526:	7a 01       	movw	r14, r20

		do
		{
			cmdBufferRd = HostMemReadWord(REG_CMD_READ);
 528:	68 ef       	ldi	r22, 0xF8	; 248
 52a:	70 e2       	ldi	r23, 0x20	; 32
 52c:	80 e3       	ldi	r24, 0x30	; 48
 52e:	90 e0       	ldi	r25, 0x00	; 0
 530:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <HostMemReadWord>
 534:	8c 01       	movw	r16, r24
			cmdBufferWr = HostMemReadWord(REG_CMD_WRITE);
 536:	6c ef       	ldi	r22, 0xFC	; 252
 538:	70 e2       	ldi	r23, 0x20	; 32
 53a:	80 e3       	ldi	r24, 0x30	; 48
 53c:	90 e0       	ldi	r25, 0x00	; 0
 53e:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <HostMemReadWord>
		}while (cmdBufferWr != cmdBufferRd);
 542:	80 17       	cp	r24, r16
 544:	91 07       	cpc	r25, r17
 546:	81 f7       	brne	.-32     	; 0x528 <__LOCK_REGION_LENGTH__+0x128>
		cmdOffset = cmdBufferWr;

		HostMemWriteDoubleWord(RAM_CMD + cmdOffset, (CMD_DLSTART));
 548:	c8 01       	movw	r24, r16
 54a:	a0 e0       	ldi	r26, 0x00	; 0
 54c:	b0 e0       	ldi	r27, 0x00	; 0
 54e:	bc 01       	movw	r22, r24
 550:	cd 01       	movw	r24, r26
 552:	70 58       	subi	r23, 0x80	; 128
 554:	8f 4c       	sbci	r24, 0xCF	; 207
 556:	9f 4f       	sbci	r25, 0xFF	; 255
 558:	20 e0       	ldi	r18, 0x00	; 0
 55a:	3f ef       	ldi	r19, 0xFF	; 255
 55c:	4f ef       	ldi	r20, 0xFF	; 255
 55e:	5f ef       	ldi	r21, 0xFF	; 255
 560:	0e 94 a3 00 	call	0x146	; 0x146 <HostMemWriteDoubleWord>
		cmdOffset = incCMDOffset(cmdOffset, 4);
 564:	64 e0       	ldi	r22, 0x04	; 4
 566:	c8 01       	movw	r24, r16
 568:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <incCMDOffset>
 56c:	8c 01       	movw	r16, r24



		HostMemWriteDoubleWord( RAM_CMD + cmdOffset, VERTEX_FORMAT(0) );
 56e:	a0 e0       	ldi	r26, 0x00	; 0
 570:	b0 e0       	ldi	r27, 0x00	; 0
 572:	bc 01       	movw	r22, r24
 574:	cd 01       	movw	r24, r26
 576:	70 58       	subi	r23, 0x80	; 128
 578:	8f 4c       	sbci	r24, 0xCF	; 207
 57a:	9f 4f       	sbci	r25, 0xFF	; 255
 57c:	20 e0       	ldi	r18, 0x00	; 0
 57e:	30 e0       	ldi	r19, 0x00	; 0
 580:	40 e0       	ldi	r20, 0x00	; 0
 582:	57 e2       	ldi	r21, 0x27	; 39
 584:	0e 94 a3 00 	call	0x146	; 0x146 <HostMemWriteDoubleWord>
		cmdOffset = incCMDOffset(cmdOffset, 4);
 588:	64 e0       	ldi	r22, 0x04	; 4
 58a:	c8 01       	movw	r24, r16
 58c:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <incCMDOffset>
 590:	8c 01       	movw	r16, r24
 592:	89 85       	ldd	r24, Y+9	; 0x09
 594:	9a 85       	ldd	r25, Y+10	; 0x0a
 596:	ab 85       	ldd	r26, Y+11	; 0x0b
 598:	bc 85       	ldd	r27, Y+12	; 0x0c
 59a:	a0 68       	ori	r26, 0x80	; 128
 59c:	b2 60       	ori	r27, 0x02	; 2



		color = RGB( 128,  gg, bb );
 59e:	fe 2c       	mov	r15, r14
 5a0:	ed 2c       	mov	r14, r13
 5a2:	dc 2c       	mov	r13, r12
 5a4:	cc 24       	eor	r12, r12
		HostMemWriteDoubleWord(RAM_CMD + cmdOffset, (DL_CLEAR_RGB | color));
 5a6:	9c 01       	movw	r18, r24
 5a8:	ad 01       	movw	r20, r26
 5aa:	2c 29       	or	r18, r12
 5ac:	3d 29       	or	r19, r13
 5ae:	4e 29       	or	r20, r14
 5b0:	5f 29       	or	r21, r15
 5b2:	c8 01       	movw	r24, r16
 5b4:	a0 e0       	ldi	r26, 0x00	; 0
 5b6:	b0 e0       	ldi	r27, 0x00	; 0
 5b8:	bc 01       	movw	r22, r24
 5ba:	cd 01       	movw	r24, r26
 5bc:	70 58       	subi	r23, 0x80	; 128
 5be:	8f 4c       	sbci	r24, 0xCF	; 207
 5c0:	9f 4f       	sbci	r25, 0xFF	; 255
 5c2:	0e 94 a3 00 	call	0x146	; 0x146 <HostMemWriteDoubleWord>
		cmdOffset = incCMDOffset(cmdOffset, 4);
 5c6:	64 e0       	ldi	r22, 0x04	; 4
 5c8:	c8 01       	movw	r24, r16
 5ca:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <incCMDOffset>
 5ce:	8c 01       	movw	r16, r24

		color = RGB( 255,  0, 0 );
		HostMemWriteDoubleWord(RAM_CMD + cmdOffset, (DL_COLOR_RGB | (color)));
 5d0:	a0 e0       	ldi	r26, 0x00	; 0
 5d2:	b0 e0       	ldi	r27, 0x00	; 0
 5d4:	bc 01       	movw	r22, r24
 5d6:	cd 01       	movw	r24, r26
 5d8:	70 58       	subi	r23, 0x80	; 128
 5da:	8f 4c       	sbci	r24, 0xCF	; 207
 5dc:	9f 4f       	sbci	r25, 0xFF	; 255
 5de:	20 e0       	ldi	r18, 0x00	; 0
 5e0:	30 e0       	ldi	r19, 0x00	; 0
 5e2:	4f ef       	ldi	r20, 0xFF	; 255
 5e4:	54 e0       	ldi	r21, 0x04	; 4
 5e6:	0e 94 a3 00 	call	0x146	; 0x146 <HostMemWriteDoubleWord>
		cmdOffset = incCMDOffset(cmdOffset, 4);
 5ea:	64 e0       	ldi	r22, 0x04	; 4
 5ec:	c8 01       	movw	r24, r16
 5ee:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <incCMDOffset>
 5f2:	8c 01       	movw	r16, r24

		HostMemWriteDoubleWord(RAM_CMD + cmdOffset, (DL_CLEAR | CLR_COL | CLR_STN | CLR_TAG));
 5f4:	a0 e0       	ldi	r26, 0x00	; 0
 5f6:	b0 e0       	ldi	r27, 0x00	; 0
 5f8:	bc 01       	movw	r22, r24
 5fa:	cd 01       	movw	r24, r26
 5fc:	70 58       	subi	r23, 0x80	; 128
 5fe:	8f 4c       	sbci	r24, 0xCF	; 207
 600:	9f 4f       	sbci	r25, 0xFF	; 255
 602:	27 e0       	ldi	r18, 0x07	; 7
 604:	30 e0       	ldi	r19, 0x00	; 0
 606:	40 e0       	ldi	r20, 0x00	; 0
 608:	56 e2       	ldi	r21, 0x26	; 38
 60a:	0e 94 a3 00 	call	0x146	; 0x146 <HostMemWriteDoubleWord>
		cmdOffset = incCMDOffset(cmdOffset, 4);
 60e:	64 e0       	ldi	r22, 0x04	; 4
 610:	c8 01       	movw	r24, r16
 612:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <incCMDOffset>
 616:	8c 01       	movw	r16, r24

		HostMemWriteDoubleWord( RAM_CMD + cmdOffset, (CMD_ROMFONT));
 618:	a0 e0       	ldi	r26, 0x00	; 0
 61a:	b0 e0       	ldi	r27, 0x00	; 0
 61c:	bc 01       	movw	r22, r24
 61e:	cd 01       	movw	r24, r26
 620:	70 58       	subi	r23, 0x80	; 128
 622:	8f 4c       	sbci	r24, 0xCF	; 207
 624:	9f 4f       	sbci	r25, 0xFF	; 255
 626:	2f e3       	ldi	r18, 0x3F	; 63
 628:	3f ef       	ldi	r19, 0xFF	; 255
 62a:	4f ef       	ldi	r20, 0xFF	; 255
 62c:	5f ef       	ldi	r21, 0xFF	; 255
 62e:	0e 94 a3 00 	call	0x146	; 0x146 <HostMemWriteDoubleWord>
		cmdOffset = incCMDOffset(cmdOffset, 4);
 632:	64 e0       	ldi	r22, 0x04	; 4
 634:	c8 01       	movw	r24, r16
 636:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <incCMDOffset>
 63a:	8c 01       	movw	r16, r24
		HostMemWriteDoubleWord( RAM_CMD + cmdOffset, (24));
 63c:	a0 e0       	ldi	r26, 0x00	; 0
 63e:	b0 e0       	ldi	r27, 0x00	; 0
 640:	bc 01       	movw	r22, r24
 642:	cd 01       	movw	r24, r26
 644:	70 58       	subi	r23, 0x80	; 128
 646:	8f 4c       	sbci	r24, 0xCF	; 207
 648:	9f 4f       	sbci	r25, 0xFF	; 255
 64a:	28 e1       	ldi	r18, 0x18	; 24
 64c:	30 e0       	ldi	r19, 0x00	; 0
 64e:	40 e0       	ldi	r20, 0x00	; 0
 650:	50 e0       	ldi	r21, 0x00	; 0
 652:	0e 94 a3 00 	call	0x146	; 0x146 <HostMemWriteDoubleWord>
		cmdOffset = incCMDOffset(cmdOffset, 4);
 656:	64 e0       	ldi	r22, 0x04	; 4
 658:	c8 01       	movw	r24, r16
 65a:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <incCMDOffset>
 65e:	8c 01       	movw	r16, r24
		HostMemWriteDoubleWord( RAM_CMD + cmdOffset, (34));
 660:	a0 e0       	ldi	r26, 0x00	; 0
 662:	b0 e0       	ldi	r27, 0x00	; 0
 664:	bc 01       	movw	r22, r24
 666:	cd 01       	movw	r24, r26
 668:	70 58       	subi	r23, 0x80	; 128
 66a:	8f 4c       	sbci	r24, 0xCF	; 207
 66c:	9f 4f       	sbci	r25, 0xFF	; 255
 66e:	22 e2       	ldi	r18, 0x22	; 34
 670:	30 e0       	ldi	r19, 0x00	; 0
 672:	40 e0       	ldi	r20, 0x00	; 0
 674:	50 e0       	ldi	r21, 0x00	; 0
 676:	0e 94 a3 00 	call	0x146	; 0x146 <HostMemWriteDoubleWord>
		cmdOffset = incCMDOffset(cmdOffset, 4);
 67a:	64 e0       	ldi	r22, 0x04	; 4
 67c:	c8 01       	movw	r24, r16
 67e:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <incCMDOffset>
 682:	8c 01       	movw	r16, r24





		HostMemWriteDoubleWord(RAM_CMD + cmdOffset, BITMAP_HANDLE(2));
 684:	a0 e0       	ldi	r26, 0x00	; 0
 686:	b0 e0       	ldi	r27, 0x00	; 0
 688:	bc 01       	movw	r22, r24
 68a:	cd 01       	movw	r24, r26
 68c:	70 58       	subi	r23, 0x80	; 128
 68e:	8f 4c       	sbci	r24, 0xCF	; 207
 690:	9f 4f       	sbci	r25, 0xFF	; 255
 692:	22 e0       	ldi	r18, 0x02	; 2
 694:	30 e0       	ldi	r19, 0x00	; 0
 696:	40 e0       	ldi	r20, 0x00	; 0
 698:	55 e0       	ldi	r21, 0x05	; 5
 69a:	0e 94 a3 00 	call	0x146	; 0x146 <HostMemWriteDoubleWord>
		cmdOffset = incCMDOffset(cmdOffset, 4);
 69e:	64 e0       	ldi	r22, 0x04	; 4
 6a0:	c8 01       	movw	r24, r16
 6a2:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <incCMDOffset>
 6a6:	8c 01       	movw	r16, r24
		HostMemWriteDoubleWord(RAM_CMD + cmdOffset, BEGIN_POINTS );
 6a8:	a0 e0       	ldi	r26, 0x00	; 0
 6aa:	b0 e0       	ldi	r27, 0x00	; 0
 6ac:	bc 01       	movw	r22, r24
 6ae:	cd 01       	movw	r24, r26
 6b0:	70 58       	subi	r23, 0x80	; 128
 6b2:	8f 4c       	sbci	r24, 0xCF	; 207
 6b4:	9f 4f       	sbci	r25, 0xFF	; 255
 6b6:	22 e0       	ldi	r18, 0x02	; 2
 6b8:	30 e0       	ldi	r19, 0x00	; 0
 6ba:	40 e0       	ldi	r20, 0x00	; 0
 6bc:	5f e1       	ldi	r21, 0x1F	; 31
 6be:	0e 94 a3 00 	call	0x146	; 0x146 <HostMemWriteDoubleWord>
		cmdOffset = incCMDOffset(cmdOffset, 4);
 6c2:	64 e0       	ldi	r22, 0x04	; 4
 6c4:	c8 01       	movw	r24, r16
 6c6:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <incCMDOffset>
 6ca:	8c 01       	movw	r16, r24
		HostMemWriteDoubleWord(RAM_CMD + cmdOffset, POINT_SIZE(16*16) );
 6cc:	a0 e0       	ldi	r26, 0x00	; 0
 6ce:	b0 e0       	ldi	r27, 0x00	; 0
 6d0:	bc 01       	movw	r22, r24
 6d2:	cd 01       	movw	r24, r26
 6d4:	70 58       	subi	r23, 0x80	; 128
 6d6:	8f 4c       	sbci	r24, 0xCF	; 207
 6d8:	9f 4f       	sbci	r25, 0xFF	; 255
 6da:	20 e0       	ldi	r18, 0x00	; 0
 6dc:	31 e0       	ldi	r19, 0x01	; 1
 6de:	40 e0       	ldi	r20, 0x00	; 0
 6e0:	5d e0       	ldi	r21, 0x0D	; 13
 6e2:	0e 94 a3 00 	call	0x146	; 0x146 <HostMemWriteDoubleWord>
		cmdOffset = incCMDOffset(cmdOffset, 4);
 6e6:	64 e0       	ldi	r22, 0x04	; 4
 6e8:	c8 01       	movw	r24, r16
 6ea:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <incCMDOffset>
 6ee:	8c 01       	movw	r16, r24
//		HostMemWriteDoubleWord(RAM_CMD + cmdOffset, VERTEX2II(point_x,point_y, 0, 0));
//		cmdOffset = incCMDOffset(cmdOffset, 4);
		HostMemWriteDoubleWord(RAM_CMD + cmdOffset, VERTEX2F(point_x, point_y));
 6f0:	d3 01       	movw	r26, r6
 6f2:	c2 01       	movw	r24, r4
 6f4:	9f 77       	andi	r25, 0x7F	; 127
 6f6:	aa 27       	eor	r26, r26
 6f8:	bb 27       	eor	r27, r27
 6fa:	ac 01       	movw	r20, r24
 6fc:	bd 01       	movw	r22, r26
 6fe:	70 64       	ori	r23, 0x40	; 64
 700:	d5 01       	movw	r26, r10
 702:	c4 01       	movw	r24, r8
 704:	9f 77       	andi	r25, 0x7F	; 127
 706:	aa 27       	eor	r26, r26
 708:	bb 27       	eor	r27, r27
 70a:	07 2e       	mov	r0, r23
 70c:	7f e0       	ldi	r23, 0x0F	; 15
 70e:	88 0f       	add	r24, r24
 710:	99 1f       	adc	r25, r25
 712:	aa 1f       	adc	r26, r26
 714:	bb 1f       	adc	r27, r27
 716:	7a 95       	dec	r23
 718:	d1 f7       	brne	.-12     	; 0x70e <__LOCK_REGION_LENGTH__+0x30e>
 71a:	70 2d       	mov	r23, r0
 71c:	9a 01       	movw	r18, r20
 71e:	ab 01       	movw	r20, r22
 720:	28 2b       	or	r18, r24
 722:	39 2b       	or	r19, r25
 724:	4a 2b       	or	r20, r26
 726:	5b 2b       	or	r21, r27
 728:	c8 01       	movw	r24, r16
 72a:	a0 e0       	ldi	r26, 0x00	; 0
 72c:	b0 e0       	ldi	r27, 0x00	; 0
 72e:	bc 01       	movw	r22, r24
 730:	cd 01       	movw	r24, r26
 732:	70 58       	subi	r23, 0x80	; 128
 734:	8f 4c       	sbci	r24, 0xCF	; 207
 736:	9f 4f       	sbci	r25, 0xFF	; 255
 738:	0e 94 a3 00 	call	0x146	; 0x146 <HostMemWriteDoubleWord>
		cmdOffset = incCMDOffset(cmdOffset, 4);
 73c:	64 e0       	ldi	r22, 0x04	; 4
 73e:	c8 01       	movw	r24, r16
 740:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <incCMDOffset>
 744:	8c 01       	movw	r16, r24
		HostMemWriteDoubleWord(RAM_CMD + cmdOffset, DL_END);
 746:	a0 e0       	ldi	r26, 0x00	; 0
 748:	b0 e0       	ldi	r27, 0x00	; 0
 74a:	bc 01       	movw	r22, r24
 74c:	cd 01       	movw	r24, r26
 74e:	70 58       	subi	r23, 0x80	; 128
 750:	8f 4c       	sbci	r24, 0xCF	; 207
 752:	9f 4f       	sbci	r25, 0xFF	; 255
 754:	20 e0       	ldi	r18, 0x00	; 0
 756:	30 e0       	ldi	r19, 0x00	; 0
 758:	40 e0       	ldi	r20, 0x00	; 0
 75a:	51 e2       	ldi	r21, 0x21	; 33
 75c:	0e 94 a3 00 	call	0x146	; 0x146 <HostMemWriteDoubleWord>
		cmdOffset = incCMDOffset(cmdOffset, 4);
 760:	64 e0       	ldi	r22, 0x04	; 4
 762:	c8 01       	movw	r24, r16
 764:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <incCMDOffset>
 768:	8c 01       	movw	r16, r24




		HostMemWriteDoubleWord(RAM_CMD + cmdOffset, (DL_DISPLAY));
 76a:	a0 e0       	ldi	r26, 0x00	; 0
 76c:	b0 e0       	ldi	r27, 0x00	; 0
 76e:	bc 01       	movw	r22, r24
 770:	cd 01       	movw	r24, r26
 772:	70 58       	subi	r23, 0x80	; 128
 774:	8f 4c       	sbci	r24, 0xCF	; 207
 776:	9f 4f       	sbci	r25, 0xFF	; 255
 778:	20 e0       	ldi	r18, 0x00	; 0
 77a:	30 e0       	ldi	r19, 0x00	; 0
 77c:	a9 01       	movw	r20, r18
 77e:	0e 94 a3 00 	call	0x146	; 0x146 <HostMemWriteDoubleWord>
		cmdOffset = incCMDOffset(cmdOffset, 4);
 782:	64 e0       	ldi	r22, 0x04	; 4
 784:	c8 01       	movw	r24, r16
 786:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <incCMDOffset>
 78a:	8c 01       	movw	r16, r24

		HostMemWriteDoubleWord(RAM_CMD + cmdOffset, (CMD_SWAP));
 78c:	a0 e0       	ldi	r26, 0x00	; 0
 78e:	b0 e0       	ldi	r27, 0x00	; 0
 790:	bc 01       	movw	r22, r24
 792:	cd 01       	movw	r24, r26
 794:	70 58       	subi	r23, 0x80	; 128
 796:	8f 4c       	sbci	r24, 0xCF	; 207
 798:	9f 4f       	sbci	r25, 0xFF	; 255
 79a:	21 e0       	ldi	r18, 0x01	; 1
 79c:	3f ef       	ldi	r19, 0xFF	; 255
 79e:	4f ef       	ldi	r20, 0xFF	; 255
 7a0:	5f ef       	ldi	r21, 0xFF	; 255
 7a2:	0e 94 a3 00 	call	0x146	; 0x146 <HostMemWriteDoubleWord>
		cmdOffset = incCMDOffset(cmdOffset, 4);
 7a6:	64 e0       	ldi	r22, 0x04	; 4
 7a8:	c8 01       	movw	r24, r16
 7aa:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <incCMDOffset>

		HostMemWriteWord(REG_CMD_WRITE, cmdOffset);
 7ae:	ac 01       	movw	r20, r24
 7b0:	6c ef       	ldi	r22, 0xFC	; 252
 7b2:	70 e2       	ldi	r23, 0x20	; 32
 7b4:	80 e3       	ldi	r24, 0x30	; 48
 7b6:	90 e0       	ldi	r25, 0x00	; 0
 7b8:	0e 94 7a 00 	call	0xf4	; 0xf4 <HostMemWriteWord>

		do
		{
			cmdBufferRd = HostMemReadWord(REG_CMD_READ);
 7bc:	68 ef       	ldi	r22, 0xF8	; 248
 7be:	70 e2       	ldi	r23, 0x20	; 32
 7c0:	80 e3       	ldi	r24, 0x30	; 48
 7c2:	90 e0       	ldi	r25, 0x00	; 0
 7c4:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <HostMemReadWord>
 7c8:	7c 01       	movw	r14, r24
			cmdBufferWr = HostMemReadWord(REG_CMD_WRITE);
 7ca:	6c ef       	ldi	r22, 0xFC	; 252
 7cc:	70 e2       	ldi	r23, 0x20	; 32
 7ce:	80 e3       	ldi	r24, 0x30	; 48
 7d0:	90 e0       	ldi	r25, 0x00	; 0
 7d2:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <HostMemReadWord>
		}while (cmdBufferWr != cmdBufferRd);
 7d6:	8e 15       	cp	r24, r14
 7d8:	9f 05       	cpc	r25, r15
 7da:	81 f7       	brne	.-32     	; 0x7bc <__LOCK_REGION_LENGTH__+0x3bc>
 7dc:	23 ce       	rjmp	.-954    	; 0x424 <__LOCK_REGION_LENGTH__+0x24>

000007de <SPI_Init>:



void SPI_Init(void)
{
	outport(SPCR,0x50);//01010000
 7de:	80 e5       	ldi	r24, 0x50	; 80
 7e0:	8c bd       	out	0x2c, r24	; 44
 7e2:	08 95       	ret

000007e4 <__divmodsi4>:
 7e4:	05 2e       	mov	r0, r21
 7e6:	97 fb       	bst	r25, 7
 7e8:	1e f4       	brtc	.+6      	; 0x7f0 <__divmodsi4+0xc>
 7ea:	00 94       	com	r0
 7ec:	0e 94 09 04 	call	0x812	; 0x812 <__negsi2>
 7f0:	57 fd       	sbrc	r21, 7
 7f2:	07 d0       	rcall	.+14     	; 0x802 <__divmodsi4_neg2>
 7f4:	0e 94 1c 04 	call	0x838	; 0x838 <__udivmodsi4>
 7f8:	07 fc       	sbrc	r0, 7
 7fa:	03 d0       	rcall	.+6      	; 0x802 <__divmodsi4_neg2>
 7fc:	4e f4       	brtc	.+18     	; 0x810 <__divmodsi4_exit>
 7fe:	0c 94 09 04 	jmp	0x812	; 0x812 <__negsi2>

00000802 <__divmodsi4_neg2>:
 802:	50 95       	com	r21
 804:	40 95       	com	r20
 806:	30 95       	com	r19
 808:	21 95       	neg	r18
 80a:	3f 4f       	sbci	r19, 0xFF	; 255
 80c:	4f 4f       	sbci	r20, 0xFF	; 255
 80e:	5f 4f       	sbci	r21, 0xFF	; 255

00000810 <__divmodsi4_exit>:
 810:	08 95       	ret

00000812 <__negsi2>:
 812:	90 95       	com	r25
 814:	80 95       	com	r24
 816:	70 95       	com	r23
 818:	61 95       	neg	r22
 81a:	7f 4f       	sbci	r23, 0xFF	; 255
 81c:	8f 4f       	sbci	r24, 0xFF	; 255
 81e:	9f 4f       	sbci	r25, 0xFF	; 255
 820:	08 95       	ret

00000822 <__muluhisi3>:
 822:	0e 94 3e 04 	call	0x87c	; 0x87c <__umulhisi3>
 826:	a5 9f       	mul	r26, r21
 828:	90 0d       	add	r25, r0
 82a:	b4 9f       	mul	r27, r20
 82c:	90 0d       	add	r25, r0
 82e:	a4 9f       	mul	r26, r20
 830:	80 0d       	add	r24, r0
 832:	91 1d       	adc	r25, r1
 834:	11 24       	eor	r1, r1
 836:	08 95       	ret

00000838 <__udivmodsi4>:
 838:	a1 e2       	ldi	r26, 0x21	; 33
 83a:	1a 2e       	mov	r1, r26
 83c:	aa 1b       	sub	r26, r26
 83e:	bb 1b       	sub	r27, r27
 840:	fd 01       	movw	r30, r26
 842:	0d c0       	rjmp	.+26     	; 0x85e <__udivmodsi4_ep>

00000844 <__udivmodsi4_loop>:
 844:	aa 1f       	adc	r26, r26
 846:	bb 1f       	adc	r27, r27
 848:	ee 1f       	adc	r30, r30
 84a:	ff 1f       	adc	r31, r31
 84c:	a2 17       	cp	r26, r18
 84e:	b3 07       	cpc	r27, r19
 850:	e4 07       	cpc	r30, r20
 852:	f5 07       	cpc	r31, r21
 854:	20 f0       	brcs	.+8      	; 0x85e <__udivmodsi4_ep>
 856:	a2 1b       	sub	r26, r18
 858:	b3 0b       	sbc	r27, r19
 85a:	e4 0b       	sbc	r30, r20
 85c:	f5 0b       	sbc	r31, r21

0000085e <__udivmodsi4_ep>:
 85e:	66 1f       	adc	r22, r22
 860:	77 1f       	adc	r23, r23
 862:	88 1f       	adc	r24, r24
 864:	99 1f       	adc	r25, r25
 866:	1a 94       	dec	r1
 868:	69 f7       	brne	.-38     	; 0x844 <__udivmodsi4_loop>
 86a:	60 95       	com	r22
 86c:	70 95       	com	r23
 86e:	80 95       	com	r24
 870:	90 95       	com	r25
 872:	9b 01       	movw	r18, r22
 874:	ac 01       	movw	r20, r24
 876:	bd 01       	movw	r22, r26
 878:	cf 01       	movw	r24, r30
 87a:	08 95       	ret

0000087c <__umulhisi3>:
 87c:	a2 9f       	mul	r26, r18
 87e:	b0 01       	movw	r22, r0
 880:	b3 9f       	mul	r27, r19
 882:	c0 01       	movw	r24, r0
 884:	a3 9f       	mul	r26, r19
 886:	70 0d       	add	r23, r0
 888:	81 1d       	adc	r24, r1
 88a:	11 24       	eor	r1, r1
 88c:	91 1d       	adc	r25, r1
 88e:	b2 9f       	mul	r27, r18
 890:	70 0d       	add	r23, r0
 892:	81 1d       	adc	r24, r1
 894:	11 24       	eor	r1, r1
 896:	91 1d       	adc	r25, r1
 898:	08 95       	ret

0000089a <_exit>:
 89a:	f8 94       	cli

0000089c <__stop_program>:
 89c:	ff cf       	rjmp	.-2      	; 0x89c <__stop_program>
